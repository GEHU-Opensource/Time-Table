import json
from Samples.samples import (WorkingDays, SampleChromosome)

class ClassTimetable:
    def __init__(self):
        # Create timetable for each class
        self.class_timetable = {
            class_id: {day: [] for day in WorkingDays.days} 
            for class_id in ["R1", "R2", "R3", "R4"]  # Assuming classes R1, R2, R3, R4
        }

    def generate_class_timetable(self, chromosome):
        """
        Populate the class timetable based on the provided chromosome schedule.
        Create a dictionary to store all data for the timetable and return it.
        """
        timetable_dict = {
            class_id: {day: [] for day in WorkingDays.days} 
            for class_id in ["R1", "R2", "R3", "R4"] 
        }

        for week, days in chromosome.items():
            for day, sections in days.items():
                for class_id, classes in sections.items():
                    for entry in classes:
                        course = week  # "Week 1" or "Week 2"
                        teacher_id = entry["teacher_id"]
                        subject_id = entry["subject_id"]
                        time_slot = entry["time_slot"]

                        # Add the class to the class timetable
                        timetable_dict[class_id][day].append({
                            "course": course,
                            "teacher_id": teacher_id,
                            "subject_id": subject_id,
                            "time_slot": time_slot
                        })

        self.class_timetable = timetable_dict
        return timetable_dict

    def save_timetable_to_json(self, file_path="Constants/class_timetable.json"):
        """
        Save the class timetable to a JSON file.
        """
        try:
            with open(file_path, "w") as json_file:
                json.dump(self.class_timetable, json_file, indent=4)
        except Exception as e:
            print(f"Error saving timetable to '{file_path}': {e}")

if __name__ == "__main__":
    class_timetable = ClassTimetable()

    # Generate timetable from the sample chromosome (Week 1 and Week 2)
    w = {
        "Week 2": SampleChromosome.schedule2,
        "Week 1": SampleChromosome.schedule1
    }

    # Generate the class timetable and get it as a dictionary
    timetable_dict = class_timetable.generate_class_timetable(w)
    
    # Save the timetable to a JSON file
    class_timetable.save_timetable_to_json()

    timetable_dict
    